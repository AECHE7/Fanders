<?php
/**
 * DocumentArchiveService - Manages document storage and archival
 * Handles SLR document storage, retrieval, and archival management
 * Updated: 2025-10-23 - Fixed PDO reference issues
 */

require_once __DIR__ . '/../core/BaseService.php';

class DocumentArchiveService extends BaseService {
    private $storageBasePath;
    
    public function __construct() {
        parent::__construct();
        $this->storageBasePath = BASE_PATH . '/storage/';
    }

    /**
     * Archive a generated document
     * @param array $documentData Document information
     * @return int|false Document archive ID or false on failure
     */
    public function archiveDocument($documentData) {
        $requiredFields = ['document_type', 'loan_id', 'document_number', 'file_name', 'file_path', 'generated_by'];
        
        foreach ($requiredFields as $field) {
            if (!isset($documentData[$field]) || empty($documentData[$field])) {
                $this->setErrorMessage("Required field '{$field}' is missing.");
                return false;
            }
        }

        try {
            // Check if database connection exists
            if (!$this->db) {
                $this->setErrorMessage("Database connection not available.");
                return false;
            }

            // Get file size if file exists
            $fileSize = 0;
            if (file_exists($documentData['file_path'])) {
                $fileSize = filesize($documentData['file_path']);
            }

            $sql = "INSERT INTO document_archive (
                        document_type, loan_id, document_number, file_name, 
                        file_path, file_size, generated_by, notes
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            
            $stmt = $this->db->prepare($sql);
            if (!$stmt) {
                $this->setErrorMessage("Failed to prepare database statement. Document archive table may not exist.");
                return false;
            }
            
            $result = $stmt->execute([
                $documentData['document_type'],
                $documentData['loan_id'],
                $documentData['document_number'],
                $documentData['file_name'],
                $documentData['file_path'],
                $fileSize,
                $documentData['generated_by'],
                $documentData['notes'] ?? null
            ]);

            if ($result) {
                return $this->db->lastInsertId();
            }

            $this->setErrorMessage('Failed to archive document.');
            return false;

        } catch (PDOException $e) {
            error_log('Document Archive Error: ' . $e->getMessage());
            $this->setErrorMessage('Database error while archiving document.');
            return false;
        }
    }

    /**
     * Get archived documents with filters (includes both legacy and new SLR documents)
     * @param array $filters Search filters
     * @return array
     */
    public function getArchivedDocuments($filters = []) {
        try {
            $whereConditions = [];
            $params = [];

            // Document type filter
            if (!empty($filters['document_type'])) {
                $whereConditions[] = "da.document_type = ?";
                $params[] = $filters['document_type'];
            }

            // Loan ID filter
            if (!empty($filters['loan_id'])) {
                $whereConditions[] = "da.loan_id = ?";
                $params[] = $filters['loan_id'];
            }

            // Date range filters
            if (!empty($filters['date_from'])) {
                $whereConditions[] = "DATE(da.generated_at) >= ?";
                $params[] = $filters['date_from'];
            }

            if (!empty($filters['date_to'])) {
                $whereConditions[] = "DATE(da.generated_at) <= ?";
                $params[] = $filters['date_to'];
            }

            // Status filter
            if (!empty($filters['status'])) {
                $whereConditions[] = "da.status = ?";
                $params[] = $filters['status'];
            }

            // Generated by filter
            if (!empty($filters['generated_by'])) {
                $whereConditions[] = "da.generated_by = ?";
                $params[] = $filters['generated_by'];
            }

            $whereClause = !empty($whereConditions) ? 'WHERE ' . implode(' AND ', $whereConditions) : '';

            // First get legacy documents from document_archive table
            $sql = "SELECT 
                        da.*,
                        l.principal,
                        l.total_loan_amount,
                        l.status as loan_status,
                        COALESCE(c.full_name, CONCAT(c.first_name, ' ', c.last_name)) as client_name,
                        u.username as generated_by_username,
                        u2.username as downloaded_by_username,
                        'legacy' as source_table
                    FROM document_archive da
                    LEFT JOIN loans l ON da.loan_id = l.id
                    LEFT JOIN clients c ON l.client_id = c.id
                    LEFT JOIN users u ON da.generated_by = u.id
                    LEFT JOIN users u2 ON da.last_downloaded_by = u2.id
                    {$whereClause}";

            $stmt = $this->db->prepare($sql);
            $stmt->execute($params);
            $legacyDocuments = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Then get new SLR documents from slr_documents table
            $slrWhereConditions = [];
            $slrParams = [];

            // Convert filters to match slr_documents table structure
            if (!empty($filters['loan_id'])) {
                $slrWhereConditions[] = "slr.loan_id = ?";
                $slrParams[] = $filters['loan_id'];
            }

            if (!empty($filters['date_from'])) {
                $slrWhereConditions[] = "DATE(slr.generated_at) >= ?";
                $slrParams[] = $filters['date_from'];
            }

            if (!empty($filters['date_to'])) {
                $slrWhereConditions[] = "DATE(slr.generated_at) <= ?";
                $slrParams[] = $filters['date_to'];
            }

            if (!empty($filters['status'])) {
                $slrWhereConditions[] = "slr.status = ?";
                $slrParams[] = $filters['status'];
            }

            if (!empty($filters['generated_by'])) {
                $slrWhereConditions[] = "slr.generated_by = ?";
                $slrParams[] = $filters['generated_by'];
            }

            $slrWhereClause = !empty($slrWhereConditions) ? 'WHERE ' . implode(' AND ', $slrWhereConditions) : '';

            $slrSql = "SELECT 
                        slr.id,
                        'SLR' as document_type,
                        slr.loan_id,
                        slr.document_number,
                        slr.file_name,
                        slr.file_path,
                        slr.file_size,
                        slr.generated_by,
                        slr.generated_at,
                        slr.download_count,
                        slr.last_downloaded_at,
                        slr.last_downloaded_by,
                        slr.status,
                        slr.notes,
                        l.principal,
                        l.total_loan_amount,
                        l.status as loan_status,
                        COALESCE(c.full_name, CONCAT(c.first_name, ' ', c.last_name)) as client_name,
                        u.username as generated_by_username,
                        u2.username as downloaded_by_username,
                        'slr_documents' as source_table
                    FROM slr_documents slr
                    LEFT JOIN loans l ON slr.loan_id = l.id
                    LEFT JOIN clients c ON l.client_id = c.id
                    LEFT JOIN users u ON slr.generated_by = u.id
                    LEFT JOIN users u2 ON slr.last_downloaded_by = u2.id
                    {$slrWhereClause}";

            $stmt = $this->db->prepare($slrSql);
            $stmt->execute($slrParams);
            $slrDocuments = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Combine both results and sort by generated_at descending
            $allDocuments = array_merge($legacyDocuments, $slrDocuments);
            
            // Sort by generated_at descending
            usort($allDocuments, function($a, $b) {
                return strtotime($b['generated_at']) - strtotime($a['generated_at']);
            });

            return $allDocuments;

        } catch (PDOException $e) {
            error_log('Get Archived Documents Error: ' . $e->getMessage());
            $this->setErrorMessage('Failed to retrieve archived documents.');
            return [];
        }
    }
                        l.principal,
                        l.total_loan_amount,
                        l.status as loan_status,
                        COALESCE(c.full_name, CONCAT(c.first_name, ' ', c.last_name)) as client_name,
                        u.username as generated_by_username,
                        u2.username as downloaded_by_username
                    FROM document_archive da
                    LEFT JOIN loans l ON da.loan_id = l.id
                    LEFT JOIN clients c ON l.client_id = c.id
                    LEFT JOIN users u ON da.generated_by = u.id
                    LEFT JOIN users u2 ON da.last_downloaded_by = u2.id
                    {$whereClause}
                    ORDER BY da.generated_at DESC";

            $stmt = $this->db->prepare($sql);
            $stmt->execute($params);
            
            return $stmt->fetchAll(PDO::FETCH_ASSOC);

        } catch (PDOException $e) {
            error_log('Get Archived Documents Error: ' . $e->getMessage());
            $this->setErrorMessage('Failed to retrieve archived documents.');
            return [];
        }
    }

    /**
     * Get a specific archived document
     * @param int $archiveId
     * @return array|false
     */
    public function getArchivedDocument($archiveId) {
        try {
            $sql = "SELECT 
                        da.*,
                        l.principal,
                        l.total_loan_amount,
                        l.status as loan_status,
                        COALESCE(c.full_name, CONCAT(c.first_name, ' ', c.last_name)) as client_name,
                        u.username as generated_by_username,
                        u2.username as downloaded_by_username
                    FROM document_archive da
                    LEFT JOIN loans l ON da.loan_id = l.id
                    LEFT JOIN clients c ON l.client_id = c.id
                    LEFT JOIN users u ON da.generated_by = u.id
                    LEFT JOIN users u2 ON da.last_downloaded_by = u2.id
                    WHERE da.id = ?";

            $stmt = $this->db->prepare($sql);
            $stmt->execute([$archiveId]);
            
            return $stmt->fetch(PDO::FETCH_ASSOC);

        } catch (PDOException $e) {
            error_log('Get Archived Document Error: ' . $e->getMessage());
            $this->setErrorMessage('Failed to retrieve archived document.');
            return false;
        }
    }

    /**
     * Record document download
     * @param int $archiveId
     * @param int $userId
     * @return bool
     */
    public function recordDownload($archiveId, $userId) {
        try {
            $sql = "UPDATE document_archive 
                    SET download_count = download_count + 1,
                        last_downloaded_at = CURRENT_TIMESTAMP,
                        last_downloaded_by = ?
                    WHERE id = ?";

            $stmt = $this->db->prepare($sql);
            return $stmt->execute([$userId, $archiveId]);

        } catch (PDOException $e) {
            error_log('Record Download Error: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Check if document file exists in storage
     * @param string $filePath
     * @return bool
     */
    public function documentFileExists($filePath) {
        return file_exists($filePath) && is_readable($filePath);
    }

    /**
     * Get document file for download
     * @param int $archiveId
     * @param int $userId
     * @return array|false Document file info or false
     */
    public function getDocumentForDownload($archiveId, $userId) {
        $document = $this->getArchivedDocument($archiveId);
        
        if (!$document) {
            $this->setErrorMessage('Document not found.');
            return false;
        }

        if (!$this->documentFileExists($document['file_path'])) {
            $this->setErrorMessage('Document file not found in storage.');
            return false;
        }

        // Record the download
        $this->recordDownload($archiveId, $userId);

        return [
            'file_path' => $document['file_path'],
            'file_name' => $document['file_name'],
            'file_size' => $document['file_size'],
            'document_type' => $document['document_type'],
            'loan_id' => $document['loan_id']
        ];
    }

    /**
     * Delete archived document
     * @param int $archiveId
     * @param bool $deleteFile Whether to also delete the physical file
     * @return bool
     */
    public function deleteArchivedDocument($archiveId, $deleteFile = false) {
        try {
            $document = $this->getArchivedDocument($archiveId);
            
            if (!$document) {
                $this->setErrorMessage('Document not found.');
                return false;
            }

            // Delete physical file if requested
            if ($deleteFile && $this->documentFileExists($document['file_path'])) {
                unlink($document['file_path']);
            }

            // Delete database record
            $sql = "DELETE FROM document_archive WHERE id = ?";
            $stmt = $this->db->prepare($sql);
            return $stmt->execute([$archiveId]);

        } catch (PDOException $e) {
            error_log('Delete Archived Document Error: ' . $e->getMessage());
            $this->setErrorMessage('Failed to delete archived document.');
            return false;
        }
    }

    /**
     * Update document status
     * @param int $archiveId
     * @param string $status
     * @return bool
     */
    public function updateDocumentStatus($archiveId, $status) {
        try {
            $validStatuses = ['active', 'archived', 'deleted'];
            
            if (!in_array($status, $validStatuses)) {
                $this->setErrorMessage('Invalid status.');
                return false;
            }

            $sql = "UPDATE document_archive SET status = ? WHERE id = ?";
            $stmt = $this->db->prepare($sql);
            return $stmt->execute([$status, $archiveId]);

        } catch (PDOException $e) {
            error_log('Update Document Status Error: ' . $e->getMessage());
            $this->setErrorMessage('Failed to update document status.');
            return false;
        }
    }

    /**
     * Get document statistics (includes both legacy and new SLR documents)
     * @return array
     */
    public function getDocumentStatistics() {
        try {
            // Get legacy document statistics
            $sql = "SELECT 
                        document_type,
                        status,
                        COUNT(*) as count,
                        SUM(file_size) as total_size,
                        SUM(download_count) as total_downloads,
                        'legacy' as source_table
                    FROM document_archive
                    GROUP BY document_type, status
                    ORDER BY document_type, status";

            $stmt = $this->db->prepare($sql);
            $stmt->execute();
            $legacyStats = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Get new SLR document statistics
            $slrSql = "SELECT 
                        'SLR' as document_type,
                        status,
                        COUNT(*) as count,
                        SUM(file_size) as total_size,
                        SUM(download_count) as total_downloads,
                        'slr_documents' as source_table
                    FROM slr_documents
                    GROUP BY status
                    ORDER BY status";

            $stmt = $this->db->prepare($slrSql);
            $stmt->execute();
            $slrStats = $stmt->fetchAll(PDO::FETCH_ASSOC);

            // Combine and aggregate statistics
            $combinedStats = array_merge($legacyStats, $slrStats);
            
            // Aggregate by document_type and status
            $aggregated = [];
            foreach ($combinedStats as $stat) {
                $key = $stat['document_type'] . '_' . $stat['status'];
                if (!isset($aggregated[$key])) {
                    $aggregated[$key] = [
                        'document_type' => $stat['document_type'],
                        'status' => $stat['status'],
                        'count' => 0,
                        'total_size' => 0,
                        'total_downloads' => 0
                    ];
                }
                $aggregated[$key]['count'] += $stat['count'];
                $aggregated[$key]['total_size'] += $stat['total_size'];
                $aggregated[$key]['total_downloads'] += $stat['total_downloads'];
            }

            return array_values($aggregated);

        } catch (PDOException $e) {
            error_log('Get Document Statistics Error: ' . $e->getMessage());
            return [];
        }
    }

    /**
     * Generate unique storage path for document
     * @param string $documentType
     * @param int $loanId
     * @param string $extension
     * @return string
     */
    public function generateStoragePath($documentType, $loanId, $extension = 'pdf') {
        $subDir = strtolower($documentType);
        $directory = $this->storageBasePath . $subDir . '/';
        
        // Create directory if it doesn't exist
        if (!is_dir($directory)) {
            mkdir($directory, 0755, true);
        }

        $filename = strtoupper($documentType) . '_' . 
                   str_pad($loanId, 6, '0', STR_PAD_LEFT) . '_' . 
                   date('Ymd_His') . '.' . $extension;

        return $directory . $filename;
    }

    /**
     * Clean up old archived documents
     * @param int $daysOld Documents older than this many days
     * @param bool $deleteFiles Whether to delete physical files
     * @return int Number of documents cleaned up
     */
    public function cleanupOldDocuments($daysOld = 365, $deleteFiles = false) {
        try {
            // Get old documents
            $sql = "SELECT * FROM document_archive 
                    WHERE generated_at < NOW() - INTERVAL ? DAY 
                    AND status = 'archived'";
            
            $stmt = $this->db->prepare($sql);
            $stmt->execute([$daysOld]);
            $oldDocuments = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $cleanedCount = 0;
            
            foreach ($oldDocuments as $document) {
                if ($this->deleteArchivedDocument($document['id'], $deleteFiles)) {
                    $cleanedCount++;
                }
            }

            return $cleanedCount;

        } catch (PDOException $e) {
            error_log('Cleanup Old Documents Error: ' . $e->getMessage());
            return 0;
        }
    }
}